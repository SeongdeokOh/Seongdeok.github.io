{
  "hash": "797bb413b76c09ab27803c98c014ba10",
  "result": {
    "markdown": "---\ntitle: \"EPPS6356 Assignment 3\"\nauthor: \"Seongdeok Oh\"\ndate: \"2022-09-28\"\ncategories: [Data Visualization]\n---\n\n\n## Assignment 3\n\n#### Compare the regression models\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Data Visualization\n\nrm(list=ls())\n## Anscombe (1973) Quartlet\n\ndata(\"anscombe\") # load Anscombe's data\n\n# Create four model objects\nlm1 <- lm(y1 ~ x1, data=anscombe)\nlm2 <- lm(y2 ~ x2, data=anscombe)\nlm3 <- lm(y3 ~ x3, data=anscombe)\nlm4 <- lm(y4 ~ x4, data=anscombe)\n\n## Fancy version (per help file)\n\nff <- y ~ x\nmods <- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] <- as.name(paste0(\"y\", i))\n  ##      ff[[3]] <- as.name(paste0(\"x\", i))\n  mods[[i]] <- lmi <- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(>F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(>F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(mods, coef)  # Note the use of this function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(mods, function(fm) coef(summary(fm)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$lm1\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(>|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Preparing for the plots\nop <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] <- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"orange\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\", lwd = 1.5)\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n```\n\n::: {.cell-output-display}\n![](assignment3_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Examples With Overfitting Finetune\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(0, 2, by = 0.025)\ny <- 5 + 3*x^2 + 100*x^3 + rnorm(length(x), 0, 50)\nz <- x^2\n\nset.seed(2022)\n\nlinearmodel <- lm(y ~ x) #model fitting\n\ntestx <- seq(1.1, 1.5, by = 0.025)\ntesty <- 5 + 3*testx^2 + 100*(testx)^3 + rnorm(length(testx), 0, 20)\npredict_linear <- predict(linearmodel, list(x= testx)) #prediction on test data set\n\nquadraticmodel <- lm(y~ x + z) #fitting\npredict_quadratic = predict(quadraticmodel, list(x = testx, z = testx^2)) #prediction on test data set\n\nsmoothspline <- smooth.spline(x,y,df = 50) #fitting \npredict_spline <- predict(smoothspline, testx)$y #prediction on test data set\n\nseq <- seq(min(x), max(x), by = 0.001)\npredict <- predict(quadraticmodel, list(x = seq, z = seq^2))\n\npar(mfrow=c(1,1))\nplot(x,y, xlab = \"X\", ylab = \"Y\", main = \"Example of Overfitting with finetune\" )\nabline(linearmodel, col = \"blue\", lwd = 1)\nlines(seq,predict, col = \"red\", lwd = 2)\nlines(smoothspline, col = \"yellow\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![](assignment3_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Change Chart with ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(anscombe, aes(x=x4,y=y4)) + # create coordinate system\n  geom_abline(col=\"blue\") + # create line  with custom color\n  geom_point(col=\"orange\", lwd=3) + # create points with custom size and color\n  xlab(\"x\") + # change x label\n  ylab(\"y\") + # change y label\n  scale_y_continuous(limits=c(2, 10)) + # change y axis limits\n  scale_x_continuous(limits=c(4, 15))   # change x axis limits\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](assignment3_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "assignment3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}